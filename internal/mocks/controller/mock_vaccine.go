// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/country.go

// Package vaccine is a generated GoMock package.
package vaccine

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vaccine "github.com/junkd0g/covid-vaccine/internal/vaccine"
)

// MockVaccine is a mock of Vaccine interface.
type MockVaccine struct {
	ctrl     *gomock.Controller
	recorder *MockVaccineMockRecorder
}

// MockVaccineMockRecorder is the mock recorder for MockVaccine.
type MockVaccineMockRecorder struct {
	mock *MockVaccine
}

// NewMockVaccine creates a new mock instance.
func NewMockVaccine(ctrl *gomock.Controller) *MockVaccine {
	mock := &MockVaccine{ctrl: ctrl}
	mock.recorder = &MockVaccineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaccine) EXPECT() *MockVaccineMockRecorder {
	return m.recorder
}

// CountryData mocks base method.
func (m *MockVaccine) CountryData(country string) (vaccine.CountryDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountryData", country)
	ret0, _ := ret[0].(vaccine.CountryDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountryData indicates an expected call of CountryData.
func (mr *MockVaccineMockRecorder) CountryData(country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountryData", reflect.TypeOf((*MockVaccine)(nil).CountryData), country)
}

// MockJSON is a mock of JSON interface.
type MockJSON struct {
	ctrl     *gomock.Controller
	recorder *MockJSONMockRecorder
}

// MockJSONMockRecorder is the mock recorder for MockJSON.
type MockJSONMockRecorder struct {
	mock *MockJSON
}

// NewMockJSON creates a new mock instance.
func NewMockJSON(ctrl *gomock.Controller) *MockJSON {
	mock := &MockJSON{ctrl: ctrl}
	mock.recorder = &MockJSONMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSON) EXPECT() *MockJSONMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockJSON) Marshal(v interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockJSONMockRecorder) Marshal(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockJSON)(nil).Marshal), v)
}
